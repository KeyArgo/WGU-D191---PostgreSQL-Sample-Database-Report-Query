DROP TABLE IF EXISTS public.details;
CREATE TABLE IF NOT EXISTS public.details
(
	pid integer NOT NULL primary key,
	rid integer NOT NULL,
	amount numeric(5,2) NOT NULL,
	date timestamp without time zone NOT NULL,
	cid integer NOT NULL,
	fname character varying(100) COLLATE pg_catalog."default" NOT NULL,
	email character varying(300) COLLATE pg_catalog."default" NOT NULL,
	CONSTRAINT fk_name FOREIGN KEY (cid)
		REFERENCES public.customer (customer_id) MATCH SIMPLE
		ON UPDATE NO ACTION
		ON DELETE NO ACTION
);

DROP TABLE IF EXISTS public.summary;
create table public.summary (
	sId serial primary key,
	date date not null,
	sales float not null,
	shop_id int not null,
	constraint Fk_shopId Foreign Key(shop_id) References store(store_id)
);

create or replace function  tr_details_summary () 
returns trigger 
language plpgsql 
AS
$$ 
BEGIN 

-- if the store id is present then update the amount if store id is not present in the summary table then insert the new data on a particular date.
-- this proceedure should be ran the night before the stakeholders' meeting
IF (select count(*) from summary where shop_id =(
           select distinct store_id 
    from details inner join rental on details.rid = rental.rental_id 
    join inventory on inventory.inventory_id = rental.inventory_id 
    where rid = New.rid) and date = date(New.date)) = 0   Then 
    
    Insert into Summary(date,sales,shop_id) values (date(New.date),New.amount,(select distinct store_id 
    from details inner join rental on details.rid = rental.rental_id
    join inventory on inventory.inventory_id = rental.inventory_id 
    where rid = New.rid));
       else 
    update summary set sales = sales+New.amount where date = date(New.date) and shop_id = (select distinct store_id 
    from details inner join rental on details.rid = rental.rental_id 
    join inventory on inventory.inventory_id = rental.inventory_id 
    where rid = New.rid);   
    END if;
         return New;
   END;
     $$
               
create Trigger tr_details 
     after insert 
     on details 
     for each row                                                                      
     execute procedure  tr_details_summary () ;
	 
 -- creating procedure to enter the  data in the details table.
 -- this proceedure should be ran the night before the stakeholders' meeting
create or replace procedure proc_details() 
       language plpgsql 
       as $$                                                                   
      begin 
          delete from details;
          delete from summary;                                                                
      insert into details(pid,rid,amount,date,cid,fname,email) 
       select p.Payment_id,r.rental_id,p.amount,p.payment_date,c.customer_id,c.first_name || ' ' || c.last_name,c.email
      from payment p join rental r on p.rental_id = r.rental_id
	  join customer c on c.customer_id = r.customer_id ;
        end;
        $$    
                                                                                
	
call proc_details();

SELECT sid,date,round(sales) sales,shop_id
FROM summary
ORDER BY date ASC, shop_id ASC

SELECT *
FROM details
ORDER BY rid ASC




